
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model categoria
 */

export type categoria = {
  id: number
  nome: string
}

/**
 * Model compra
 */

export type compra = {
  id: number
  anotacao: string | null
  createdat: Date | null
  updatedat: Date | null
}

/**
 * Model item
 */

export type item = {
  id: number
  quantidade: number
  preco: Prisma.Decimal | null
  unidade: string
  foto: string | null
  produto: number
  compra: number
}

/**
 * Model produto
 */

export type produto = {
  id: number
  nome: string
  foto: string | null
  categoria: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categorias
 * const categorias = await prisma.categoria.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categorias
   * const categorias = await prisma.categoria.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.categoria`: Exposes CRUD operations for the **categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.categoriaDelegate<GlobalReject>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.compraDelegate<GlobalReject>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.itemDelegate<GlobalReject>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.produtoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.20.1
   * Query Engine version: 60ba6551f29b17d7d6ce479e5733c70d9c00860e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    categoria: 'categoria',
    compra: 'compra',
    item: 'item',
    produto: 'produto'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model categoria
   */


  export type AggregateCategoria = {
    count: CategoriaCountAggregateOutputType | null
    avg: CategoriaAvgAggregateOutputType | null
    sum: CategoriaSumAggregateOutputType | null
    min: CategoriaMinAggregateOutputType | null
    max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number
  }

  export type CategoriaSumAggregateOutputType = {
    id: number
  }

  export type CategoriaMinAggregateOutputType = {
    id: number
    nome: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number
    nome: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    nome: number | null
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type CategoriaAggregateArgs = {
    /**
     * Filter which categoria to aggregate.
    **/
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
    **/
    orderBy?: Enumerable<categoriaOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
    [P in keyof T & keyof AggregateCategoria]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }


    
    
  export type CategoriaGroupByArgs = {
    where?: categoriaWhereInput
    orderBy?: Enumerable<categoriaOrderByInput>
    by: Array<CategoriaScalarFieldEnum>
    having?: categoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: CategoriaCountAggregateInputType | true
    avg?: CategoriaAvgAggregateInputType
    sum?: CategoriaSumAggregateInputType
    min?: CategoriaMinAggregateInputType
    max?: CategoriaMaxAggregateInputType
  }


  export type CategoriaGroupByOutputType = {
    id: number
    nome: string
    count: CategoriaCountAggregateOutputType | null
    avg: CategoriaAvgAggregateOutputType | null
    sum: CategoriaSumAggregateOutputType | null
    min: CategoriaMinAggregateOutputType | null
    max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Promise<Array<
    PickArray<CategoriaGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: GetScalarType<T[P], CategoriaGroupByOutputType[P]>
    }
  >>
    

  export type categoriaSelect = {
    id?: boolean
    nome?: boolean
    produtos?: boolean | produtoFindManyArgs
  }

  export type categoriaInclude = {
    produtos?: boolean | produtoFindManyArgs
  }

  export type categoriaGetPayload<
    S extends boolean | null | undefined | categoriaArgs,
    U = keyof S
      > = S extends true
        ? categoria
    : S extends undefined
    ? never
    : S extends categoriaArgs | categoriaFindManyArgs
    ?'include' extends U
    ? categoria  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'produtos'
        ? Array < produtoGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof categoria ?categoria [P]
  : 
          P extends 'produtos'
        ? Array < produtoGetPayload<S['select'][P]>>  : never
  } 
    : categoria
  : categoria


  type categoriaCountArgs = Merge<
    Omit<categoriaFindManyArgs, 'select' | 'include'> & {
      select?: CategoriaCountAggregateInputType | true
    }
  >

  export interface categoriaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {categoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoriaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'categoria'> extends True ? CheckSelect<T, Prisma__categoriaClient<categoria>, Prisma__categoriaClient<categoriaGetPayload<T>>> : CheckSelect<T, Prisma__categoriaClient<categoria | null >, Prisma__categoriaClient<categoriaGetPayload<T> | null >>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoriaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'categoria'> extends True ? CheckSelect<T, Prisma__categoriaClient<categoria>, Prisma__categoriaClient<categoriaGetPayload<T>>> : CheckSelect<T, Prisma__categoriaClient<categoria | null >, Prisma__categoriaClient<categoriaGetPayload<T> | null >>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriaFindManyArgs>(
      args?: SelectSubset<T, categoriaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<categoria>>, PrismaPromise<Array<categoriaGetPayload<T>>>>

    /**
     * Create a Categoria.
     * @param {categoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends categoriaCreateArgs>(
      args: SelectSubset<T, categoriaCreateArgs>
    ): CheckSelect<T, Prisma__categoriaClient<categoria>, Prisma__categoriaClient<categoriaGetPayload<T>>>

    /**
     * Create many Categorias.
     *     @param {categoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriaCreateManyArgs>(
      args?: SelectSubset<T, categoriaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {categoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends categoriaDeleteArgs>(
      args: SelectSubset<T, categoriaDeleteArgs>
    ): CheckSelect<T, Prisma__categoriaClient<categoria>, Prisma__categoriaClient<categoriaGetPayload<T>>>

    /**
     * Update one Categoria.
     * @param {categoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriaUpdateArgs>(
      args: SelectSubset<T, categoriaUpdateArgs>
    ): CheckSelect<T, Prisma__categoriaClient<categoria>, Prisma__categoriaClient<categoriaGetPayload<T>>>

    /**
     * Delete zero or more Categorias.
     * @param {categoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriaDeleteManyArgs>(
      args?: SelectSubset<T, categoriaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriaUpdateManyArgs>(
      args: SelectSubset<T, categoriaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {categoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends categoriaUpsertArgs>(
      args: SelectSubset<T, categoriaUpsertArgs>
    ): CheckSelect<T, Prisma__categoriaClient<categoria>, Prisma__categoriaClient<categoriaGetPayload<T>>>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriaCountArgs>(
      args?: Subset<T, categoriaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoriaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produtos<T extends produtoFindManyArgs = {}>(args?: Subset<T, produtoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<produto>>, PrismaPromise<Array<produtoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * categoria findUnique
   */
  export type categoriaFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
    /**
     * Throw an Error if a categoria can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categoria to fetch.
    **/
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findFirst
   */
  export type categoriaFindFirstArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
    /**
     * Throw an Error if a categoria can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categoria to fetch.
    **/
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
    **/
    orderBy?: Enumerable<categoriaOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
    **/
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
    **/
    distinct?: Enumerable<CategoriaScalarFieldEnum>
  }


  /**
   * categoria findMany
   */
  export type categoriaFindManyArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
    /**
     * Filter, which categorias to fetch.
    **/
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
    **/
    orderBy?: Enumerable<categoriaOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
    **/
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
    **/
    skip?: number
    distinct?: Enumerable<CategoriaScalarFieldEnum>
  }


  /**
   * categoria create
   */
  export type categoriaCreateArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
    /**
     * The data needed to create a categoria.
    **/
    data: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
  }


  /**
   * categoria createMany
   */
  export type categoriaCreateManyArgs = {
    data: Enumerable<categoriaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * categoria update
   */
  export type categoriaUpdateArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
    /**
     * The data needed to update a categoria.
    **/
    data: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
    /**
     * Choose, which categoria to update.
    **/
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria updateMany
   */
  export type categoriaUpdateManyArgs = {
    data: XOR<categoriaUpdateManyMutationInput, categoriaUncheckedUpdateManyInput>
    where?: categoriaWhereInput
  }


  /**
   * categoria upsert
   */
  export type categoriaUpsertArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
    /**
     * The filter to search for the categoria to update in case it exists.
    **/
    where: categoriaWhereUniqueInput
    /**
     * In case the categoria found by the `where` argument doesn't exist, create a new categoria with this data.
    **/
    create: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
    /**
     * In case the categoria was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
  }


  /**
   * categoria delete
   */
  export type categoriaDeleteArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
    /**
     * Filter which categoria to delete.
    **/
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria deleteMany
   */
  export type categoriaDeleteManyArgs = {
    where?: categoriaWhereInput
  }


  /**
   * categoria without action
   */
  export type categoriaArgs = {
    /**
     * Select specific fields to fetch from the categoria
    **/
    select?: categoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: categoriaInclude | null
  }



  /**
   * Model compra
   */


  export type AggregateCompra = {
    count: CompraCountAggregateOutputType | null
    avg: CompraAvgAggregateOutputType | null
    sum: CompraSumAggregateOutputType | null
    min: CompraMinAggregateOutputType | null
    max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id: number
  }

  export type CompraSumAggregateOutputType = {
    id: number
  }

  export type CompraMinAggregateOutputType = {
    id: number
    anotacao: string | null
    createdat: Date | null
    updatedat: Date | null
  }

  export type CompraMaxAggregateOutputType = {
    id: number
    anotacao: string | null
    createdat: Date | null
    updatedat: Date | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    anotacao: number | null
    createdat: number | null
    updatedat: number | null
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id?: true
  }

  export type CompraSumAggregateInputType = {
    id?: true
  }

  export type CompraMinAggregateInputType = {
    id?: true
    anotacao?: true
    createdat?: true
    updatedat?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    anotacao?: true
    createdat?: true
    updatedat?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    anotacao?: true
    createdat?: true
    updatedat?: true
    _all?: true
  }

  export type CompraAggregateArgs = {
    /**
     * Filter which compra to aggregate.
    **/
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
    **/
    orderBy?: Enumerable<compraOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned compras
    **/
    count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
    [P in keyof T & keyof AggregateCompra]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }


    
    
  export type CompraGroupByArgs = {
    where?: compraWhereInput
    orderBy?: Enumerable<compraOrderByInput>
    by: Array<CompraScalarFieldEnum>
    having?: compraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: CompraCountAggregateInputType | true
    avg?: CompraAvgAggregateInputType
    sum?: CompraSumAggregateInputType
    min?: CompraMinAggregateInputType
    max?: CompraMaxAggregateInputType
  }


  export type CompraGroupByOutputType = {
    id: number
    anotacao: string | null
    createdat: Date | null
    updatedat: Date | null
    count: CompraCountAggregateOutputType | null
    avg: CompraAvgAggregateOutputType | null
    sum: CompraSumAggregateOutputType | null
    min: CompraMinAggregateOutputType | null
    max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends CompraGroupByArgs> = Promise<Array<
    PickArray<CompraGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof CompraGroupByOutputType))]: GetScalarType<T[P], CompraGroupByOutputType[P]>
    }
  >>
    

  export type compraSelect = {
    id?: boolean
    anotacao?: boolean
    createdat?: boolean
    updatedat?: boolean
    itens?: boolean | itemFindManyArgs
  }

  export type compraInclude = {
    itens?: boolean | itemFindManyArgs
  }

  export type compraGetPayload<
    S extends boolean | null | undefined | compraArgs,
    U = keyof S
      > = S extends true
        ? compra
    : S extends undefined
    ? never
    : S extends compraArgs | compraFindManyArgs
    ?'include' extends U
    ? compra  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'itens'
        ? Array < itemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof compra ?compra [P]
  : 
          P extends 'itens'
        ? Array < itemGetPayload<S['select'][P]>>  : never
  } 
    : compra
  : compra


  type compraCountArgs = Merge<
    Omit<compraFindManyArgs, 'select' | 'include'> & {
      select?: CompraCountAggregateInputType | true
    }
  >

  export interface compraDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Compra that matches the filter.
     * @param {compraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends compraFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, compraFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'compra'> extends True ? CheckSelect<T, Prisma__compraClient<compra>, Prisma__compraClient<compraGetPayload<T>>> : CheckSelect<T, Prisma__compraClient<compra | null >, Prisma__compraClient<compraGetPayload<T> | null >>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends compraFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, compraFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'compra'> extends True ? CheckSelect<T, Prisma__compraClient<compra>, Prisma__compraClient<compraGetPayload<T>>> : CheckSelect<T, Prisma__compraClient<compra | null >, Prisma__compraClient<compraGetPayload<T> | null >>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends compraFindManyArgs>(
      args?: SelectSubset<T, compraFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<compra>>, PrismaPromise<Array<compraGetPayload<T>>>>

    /**
     * Create a Compra.
     * @param {compraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
    **/
    create<T extends compraCreateArgs>(
      args: SelectSubset<T, compraCreateArgs>
    ): CheckSelect<T, Prisma__compraClient<compra>, Prisma__compraClient<compraGetPayload<T>>>

    /**
     * Create many Compras.
     *     @param {compraCreateManyArgs} args - Arguments to create many Compras.
     *     @example
     *     // Create many Compras
     *     const compra = await prisma.compra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends compraCreateManyArgs>(
      args?: SelectSubset<T, compraCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Compra.
     * @param {compraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
    **/
    delete<T extends compraDeleteArgs>(
      args: SelectSubset<T, compraDeleteArgs>
    ): CheckSelect<T, Prisma__compraClient<compra>, Prisma__compraClient<compraGetPayload<T>>>

    /**
     * Update one Compra.
     * @param {compraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends compraUpdateArgs>(
      args: SelectSubset<T, compraUpdateArgs>
    ): CheckSelect<T, Prisma__compraClient<compra>, Prisma__compraClient<compraGetPayload<T>>>

    /**
     * Delete zero or more Compras.
     * @param {compraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends compraDeleteManyArgs>(
      args?: SelectSubset<T, compraDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends compraUpdateManyArgs>(
      args: SelectSubset<T, compraUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {compraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
    **/
    upsert<T extends compraUpsertArgs>(
      args: SelectSubset<T, compraUpsertArgs>
    ): CheckSelect<T, Prisma__compraClient<compra>, Prisma__compraClient<compraGetPayload<T>>>

    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends compraCountArgs>(
      args?: Subset<T, compraCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraGroupByArgs['orderBy'] }
        : { orderBy?: CompraGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__compraClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    itens<T extends itemFindManyArgs = {}>(args?: Subset<T, itemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<item>>, PrismaPromise<Array<itemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * compra findUnique
   */
  export type compraFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
    /**
     * Throw an Error if a compra can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which compra to fetch.
    **/
    where: compraWhereUniqueInput
  }


  /**
   * compra findFirst
   */
  export type compraFindFirstArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
    /**
     * Throw an Error if a compra can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which compra to fetch.
    **/
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
    **/
    orderBy?: Enumerable<compraOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compras.
    **/
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compras.
    **/
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * compra findMany
   */
  export type compraFindManyArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
    /**
     * Filter, which compras to fetch.
    **/
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
    **/
    orderBy?: Enumerable<compraOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing compras.
    **/
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
    **/
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * compra create
   */
  export type compraCreateArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
    /**
     * The data needed to create a compra.
    **/
    data: XOR<compraCreateInput, compraUncheckedCreateInput>
  }


  /**
   * compra createMany
   */
  export type compraCreateManyArgs = {
    data: Enumerable<compraCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * compra update
   */
  export type compraUpdateArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
    /**
     * The data needed to update a compra.
    **/
    data: XOR<compraUpdateInput, compraUncheckedUpdateInput>
    /**
     * Choose, which compra to update.
    **/
    where: compraWhereUniqueInput
  }


  /**
   * compra updateMany
   */
  export type compraUpdateManyArgs = {
    data: XOR<compraUpdateManyMutationInput, compraUncheckedUpdateManyInput>
    where?: compraWhereInput
  }


  /**
   * compra upsert
   */
  export type compraUpsertArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
    /**
     * The filter to search for the compra to update in case it exists.
    **/
    where: compraWhereUniqueInput
    /**
     * In case the compra found by the `where` argument doesn't exist, create a new compra with this data.
    **/
    create: XOR<compraCreateInput, compraUncheckedCreateInput>
    /**
     * In case the compra was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<compraUpdateInput, compraUncheckedUpdateInput>
  }


  /**
   * compra delete
   */
  export type compraDeleteArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
    /**
     * Filter which compra to delete.
    **/
    where: compraWhereUniqueInput
  }


  /**
   * compra deleteMany
   */
  export type compraDeleteManyArgs = {
    where?: compraWhereInput
  }


  /**
   * compra without action
   */
  export type compraArgs = {
    /**
     * Select specific fields to fetch from the compra
    **/
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: compraInclude | null
  }



  /**
   * Model item
   */


  export type AggregateItem = {
    count: ItemCountAggregateOutputType | null
    avg: ItemAvgAggregateOutputType | null
    sum: ItemSumAggregateOutputType | null
    min: ItemMinAggregateOutputType | null
    max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number
    quantidade: number
    preco: Decimal | null
    produto: number
    compra: number
  }

  export type ItemSumAggregateOutputType = {
    id: number
    quantidade: number
    preco: Decimal | null
    produto: number
    compra: number
  }

  export type ItemMinAggregateOutputType = {
    id: number
    quantidade: number
    preco: Decimal | null
    unidade: string | null
    foto: string | null
    produto: number
    compra: number
  }

  export type ItemMaxAggregateOutputType = {
    id: number
    quantidade: number
    preco: Decimal | null
    unidade: string | null
    foto: string | null
    produto: number
    compra: number
  }

  export type ItemCountAggregateOutputType = {
    id: number
    quantidade: number
    preco: number | null
    unidade: number | null
    foto: number | null
    produto: number
    compra: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    produto?: true
    compra?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    produto?: true
    compra?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    unidade?: true
    foto?: true
    produto?: true
    compra?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    unidade?: true
    foto?: true
    produto?: true
    compra?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    unidade?: true
    foto?: true
    produto?: true
    compra?: true
    _all?: true
  }

  export type ItemAggregateArgs = {
    /**
     * Filter which item to aggregate.
    **/
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
    **/
    orderBy?: Enumerable<itemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned items
    **/
    count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
    [P in keyof T & keyof AggregateItem]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }


    
    
  export type ItemGroupByArgs = {
    where?: itemWhereInput
    orderBy?: Enumerable<itemOrderByInput>
    by: Array<ItemScalarFieldEnum>
    having?: itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ItemCountAggregateInputType | true
    avg?: ItemAvgAggregateInputType
    sum?: ItemSumAggregateInputType
    min?: ItemMinAggregateInputType
    max?: ItemMaxAggregateInputType
  }


  export type ItemGroupByOutputType = {
    id: number
    quantidade: number
    preco: Decimal | null
    unidade: string
    foto: string | null
    produto: number
    compra: number
    count: ItemCountAggregateOutputType | null
    avg: ItemAvgAggregateOutputType | null
    sum: ItemSumAggregateOutputType | null
    min: ItemMinAggregateOutputType | null
    max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Promise<Array<
    PickArray<ItemGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ItemGroupByOutputType))]: GetScalarType<T[P], ItemGroupByOutputType[P]>
    }
  >>
    

  export type itemSelect = {
    id?: boolean
    quantidade?: boolean
    preco?: boolean
    unidade?: boolean
    foto?: boolean
    produto?: boolean
    compra?: boolean
    compra_compraToitem?: boolean | compraArgs
    produto_itemToproduto?: boolean | produtoArgs
  }

  export type itemInclude = {
    compra_compraToitem?: boolean | compraArgs
    produto_itemToproduto?: boolean | produtoArgs
  }

  export type itemGetPayload<
    S extends boolean | null | undefined | itemArgs,
    U = keyof S
      > = S extends true
        ? item
    : S extends undefined
    ? never
    : S extends itemArgs | itemFindManyArgs
    ?'include' extends U
    ? item  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'compra_compraToitem'
        ? compraGetPayload<S['include'][P]> :
        P extends 'produto_itemToproduto'
        ? produtoGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof item ?item [P]
  : 
          P extends 'compra_compraToitem'
        ? compraGetPayload<S['select'][P]> :
        P extends 'produto_itemToproduto'
        ? produtoGetPayload<S['select'][P]> : never
  } 
    : item
  : item


  type itemCountArgs = Merge<
    Omit<itemFindManyArgs, 'select' | 'include'> & {
      select?: ItemCountAggregateInputType | true
    }
  >

  export interface itemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Item that matches the filter.
     * @param {itemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, itemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'item'> extends True ? CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>> : CheckSelect<T, Prisma__itemClient<item | null >, Prisma__itemClient<itemGetPayload<T> | null >>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, itemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'item'> extends True ? CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>> : CheckSelect<T, Prisma__itemClient<item | null >, Prisma__itemClient<itemGetPayload<T> | null >>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends itemFindManyArgs>(
      args?: SelectSubset<T, itemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<item>>, PrismaPromise<Array<itemGetPayload<T>>>>

    /**
     * Create a Item.
     * @param {itemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends itemCreateArgs>(
      args: SelectSubset<T, itemCreateArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Create many Items.
     *     @param {itemCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const item = await prisma.item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itemCreateManyArgs>(
      args?: SelectSubset<T, itemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {itemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends itemDeleteArgs>(
      args: SelectSubset<T, itemDeleteArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Update one Item.
     * @param {itemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itemUpdateArgs>(
      args: SelectSubset<T, itemUpdateArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Delete zero or more Items.
     * @param {itemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itemDeleteManyArgs>(
      args?: SelectSubset<T, itemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itemUpdateManyArgs>(
      args: SelectSubset<T, itemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {itemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends itemUpsertArgs>(
      args: SelectSubset<T, itemUpsertArgs>
    ): CheckSelect<T, Prisma__itemClient<item>, Prisma__itemClient<itemGetPayload<T>>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends itemCountArgs>(
      args?: Subset<T, itemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    compra_compraToitem<T extends compraArgs = {}>(args?: Subset<T, compraArgs>): CheckSelect<T, Prisma__compraClient<compra | null >, Prisma__compraClient<compraGetPayload<T> | null >>;

    produto_itemToproduto<T extends produtoArgs = {}>(args?: Subset<T, produtoArgs>): CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * item findUnique
   */
  export type itemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
    /**
     * Throw an Error if a item can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which item to fetch.
    **/
    where: itemWhereUniqueInput
  }


  /**
   * item findFirst
   */
  export type itemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
    /**
     * Throw an Error if a item can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which item to fetch.
    **/
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
    **/
    orderBy?: Enumerable<itemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
    **/
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
    **/
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * item findMany
   */
  export type itemFindManyArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
    /**
     * Filter, which items to fetch.
    **/
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
    **/
    orderBy?: Enumerable<itemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing items.
    **/
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
    **/
    skip?: number
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * item create
   */
  export type itemCreateArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
    /**
     * The data needed to create a item.
    **/
    data: XOR<itemCreateInput, itemUncheckedCreateInput>
  }


  /**
   * item createMany
   */
  export type itemCreateManyArgs = {
    data: Enumerable<itemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * item update
   */
  export type itemUpdateArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
    /**
     * The data needed to update a item.
    **/
    data: XOR<itemUpdateInput, itemUncheckedUpdateInput>
    /**
     * Choose, which item to update.
    **/
    where: itemWhereUniqueInput
  }


  /**
   * item updateMany
   */
  export type itemUpdateManyArgs = {
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyInput>
    where?: itemWhereInput
  }


  /**
   * item upsert
   */
  export type itemUpsertArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
    /**
     * The filter to search for the item to update in case it exists.
    **/
    where: itemWhereUniqueInput
    /**
     * In case the item found by the `where` argument doesn't exist, create a new item with this data.
    **/
    create: XOR<itemCreateInput, itemUncheckedCreateInput>
    /**
     * In case the item was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<itemUpdateInput, itemUncheckedUpdateInput>
  }


  /**
   * item delete
   */
  export type itemDeleteArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
    /**
     * Filter which item to delete.
    **/
    where: itemWhereUniqueInput
  }


  /**
   * item deleteMany
   */
  export type itemDeleteManyArgs = {
    where?: itemWhereInput
  }


  /**
   * item without action
   */
  export type itemArgs = {
    /**
     * Select specific fields to fetch from the item
    **/
    select?: itemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: itemInclude | null
  }



  /**
   * Model produto
   */


  export type AggregateProduto = {
    count: ProdutoCountAggregateOutputType | null
    avg: ProdutoAvgAggregateOutputType | null
    sum: ProdutoSumAggregateOutputType | null
    min: ProdutoMinAggregateOutputType | null
    max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number
    categoria: number
  }

  export type ProdutoSumAggregateOutputType = {
    id: number
    categoria: number
  }

  export type ProdutoMinAggregateOutputType = {
    id: number
    nome: string | null
    foto: string | null
    categoria: number
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number
    nome: string | null
    foto: string | null
    categoria: number
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    nome: number | null
    foto: number | null
    categoria: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
    categoria?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
    categoria?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    nome?: true
    foto?: true
    categoria?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    nome?: true
    foto?: true
    categoria?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    nome?: true
    foto?: true
    categoria?: true
    _all?: true
  }

  export type ProdutoAggregateArgs = {
    /**
     * Filter which produto to aggregate.
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
    **/
    orderBy?: Enumerable<produtoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned produtos
    **/
    count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
    [P in keyof T & keyof AggregateProduto]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }


    
    
  export type ProdutoGroupByArgs = {
    where?: produtoWhereInput
    orderBy?: Enumerable<produtoOrderByInput>
    by: Array<ProdutoScalarFieldEnum>
    having?: produtoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ProdutoCountAggregateInputType | true
    avg?: ProdutoAvgAggregateInputType
    sum?: ProdutoSumAggregateInputType
    min?: ProdutoMinAggregateInputType
    max?: ProdutoMaxAggregateInputType
  }


  export type ProdutoGroupByOutputType = {
    id: number
    nome: string
    foto: string | null
    categoria: number
    count: ProdutoCountAggregateOutputType | null
    avg: ProdutoAvgAggregateOutputType | null
    sum: ProdutoSumAggregateOutputType | null
    min: ProdutoMinAggregateOutputType | null
    max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Promise<Array<
    PickArray<ProdutoGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: GetScalarType<T[P], ProdutoGroupByOutputType[P]>
    }
  >>
    

  export type produtoSelect = {
    id?: boolean
    nome?: boolean
    foto?: boolean
    categoria?: boolean
    categoria_categoriaToproduto?: boolean | categoriaArgs
    itens?: boolean | itemFindManyArgs
  }

  export type produtoInclude = {
    categoria_categoriaToproduto?: boolean | categoriaArgs
    itens?: boolean | itemFindManyArgs
  }

  export type produtoGetPayload<
    S extends boolean | null | undefined | produtoArgs,
    U = keyof S
      > = S extends true
        ? produto
    : S extends undefined
    ? never
    : S extends produtoArgs | produtoFindManyArgs
    ?'include' extends U
    ? produto  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'categoria_categoriaToproduto'
        ? categoriaGetPayload<S['include'][P]> :
        P extends 'itens'
        ? Array < itemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof produto ?produto [P]
  : 
          P extends 'categoria_categoriaToproduto'
        ? categoriaGetPayload<S['select'][P]> :
        P extends 'itens'
        ? Array < itemGetPayload<S['select'][P]>>  : never
  } 
    : produto
  : produto


  type produtoCountArgs = Merge<
    Omit<produtoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }
  >

  export interface produtoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Produto that matches the filter.
     * @param {produtoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends produtoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, produtoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends produtoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, produtoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends produtoFindManyArgs>(
      args?: SelectSubset<T, produtoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<produto>>, PrismaPromise<Array<produtoGetPayload<T>>>>

    /**
     * Create a Produto.
     * @param {produtoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends produtoCreateArgs>(
      args: SelectSubset<T, produtoCreateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Create many Produtos.
     *     @param {produtoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends produtoCreateManyArgs>(
      args?: SelectSubset<T, produtoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {produtoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends produtoDeleteArgs>(
      args: SelectSubset<T, produtoDeleteArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Update one Produto.
     * @param {produtoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends produtoUpdateArgs>(
      args: SelectSubset<T, produtoUpdateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Delete zero or more Produtos.
     * @param {produtoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends produtoDeleteManyArgs>(
      args?: SelectSubset<T, produtoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends produtoUpdateManyArgs>(
      args: SelectSubset<T, produtoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {produtoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends produtoUpsertArgs>(
      args: SelectSubset<T, produtoUpsertArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends produtoCountArgs>(
      args?: Subset<T, produtoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__produtoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categoria_categoriaToproduto<T extends categoriaArgs = {}>(args?: Subset<T, categoriaArgs>): CheckSelect<T, Prisma__categoriaClient<categoria | null >, Prisma__categoriaClient<categoriaGetPayload<T> | null >>;

    itens<T extends itemFindManyArgs = {}>(args?: Subset<T, itemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<item>>, PrismaPromise<Array<itemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * produto findUnique
   */
  export type produtoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
    /**
     * Throw an Error if a produto can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which produto to fetch.
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto findFirst
   */
  export type produtoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
    /**
     * Throw an Error if a produto can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which produto to fetch.
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
    **/
    orderBy?: Enumerable<produtoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produtos.
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produtos.
    **/
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * produto findMany
   */
  export type produtoFindManyArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
    /**
     * Filter, which produtos to fetch.
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
    **/
    orderBy?: Enumerable<produtoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing produtos.
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
    **/
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * produto create
   */
  export type produtoCreateArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
    /**
     * The data needed to create a produto.
    **/
    data: XOR<produtoCreateInput, produtoUncheckedCreateInput>
  }


  /**
   * produto createMany
   */
  export type produtoCreateManyArgs = {
    data: Enumerable<produtoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * produto update
   */
  export type produtoUpdateArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
    /**
     * The data needed to update a produto.
    **/
    data: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
    /**
     * Choose, which produto to update.
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto updateMany
   */
  export type produtoUpdateManyArgs = {
    data: XOR<produtoUpdateManyMutationInput, produtoUncheckedUpdateManyInput>
    where?: produtoWhereInput
  }


  /**
   * produto upsert
   */
  export type produtoUpsertArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
    /**
     * The filter to search for the produto to update in case it exists.
    **/
    where: produtoWhereUniqueInput
    /**
     * In case the produto found by the `where` argument doesn't exist, create a new produto with this data.
    **/
    create: XOR<produtoCreateInput, produtoUncheckedCreateInput>
    /**
     * In case the produto was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
  }


  /**
   * produto delete
   */
  export type produtoDeleteArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
    /**
     * Filter which produto to delete.
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto deleteMany
   */
  export type produtoDeleteManyArgs = {
    where?: produtoWhereInput
  }


  /**
   * produto without action
   */
  export type produtoArgs = {
    /**
     * Select specific fields to fetch from the produto
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: produtoInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id: 'id',
    anotacao: 'anotacao',
    createdat: 'createdat',
    updatedat: 'updatedat'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    quantidade: 'quantidade',
    preco: 'preco',
    unidade: 'unidade',
    foto: 'foto',
    produto: 'produto',
    compra: 'compra'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    foto: 'foto',
    categoria: 'categoria'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type categoriaWhereInput = {
    AND?: Enumerable<categoriaWhereInput>
    OR?: Enumerable<categoriaWhereInput>
    NOT?: Enumerable<categoriaWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    produtos?: ProdutoListRelationFilter
  }

  export type categoriaOrderByInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type categoriaWhereUniqueInput = {
    id?: number
    nome?: string
  }

  export type categoriaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoriaScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoriaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoriaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
  }

  export type compraWhereInput = {
    AND?: Enumerable<compraWhereInput>
    OR?: Enumerable<compraWhereInput>
    NOT?: Enumerable<compraWhereInput>
    id?: IntFilter | number
    anotacao?: StringNullableFilter | string | null
    createdat?: DateTimeNullableFilter | Date | string | null
    updatedat?: DateTimeNullableFilter | Date | string | null
    itens?: ItemListRelationFilter
  }

  export type compraOrderByInput = {
    id?: SortOrder
    anotacao?: SortOrder
    createdat?: SortOrder
    updatedat?: SortOrder
  }

  export type compraWhereUniqueInput = {
    id?: number
  }

  export type compraScalarWhereWithAggregatesInput = {
    AND?: Enumerable<compraScalarWhereWithAggregatesInput>
    OR?: Enumerable<compraScalarWhereWithAggregatesInput>
    NOT?: Enumerable<compraScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    anotacao?: StringNullableWithAggregatesFilter | string | null
    createdat?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedat?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type itemWhereInput = {
    AND?: Enumerable<itemWhereInput>
    OR?: Enumerable<itemWhereInput>
    NOT?: Enumerable<itemWhereInput>
    id?: IntFilter | number
    quantidade?: IntFilter | number
    preco?: DecimalNullableFilter | Decimal | number | string | null
    unidade?: StringFilter | string
    foto?: StringNullableFilter | string | null
    produto?: IntFilter | number
    compra?: IntFilter | number
    compra_compraToitem?: XOR<CompraRelationFilter, compraWhereInput>
    produto_itemToproduto?: XOR<ProdutoRelationFilter, produtoWhereInput>
  }

  export type itemOrderByInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    unidade?: SortOrder
    foto?: SortOrder
    produto?: SortOrder
    compra?: SortOrder
  }

  export type itemWhereUniqueInput = {
    id?: number
  }

  export type itemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<itemScalarWhereWithAggregatesInput>
    OR?: Enumerable<itemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<itemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    quantidade?: IntWithAggregatesFilter | number
    preco?: DecimalNullableWithAggregatesFilter | Decimal | number | string | null
    unidade?: StringWithAggregatesFilter | string
    foto?: StringNullableWithAggregatesFilter | string | null
    produto?: IntWithAggregatesFilter | number
    compra?: IntWithAggregatesFilter | number
  }

  export type produtoWhereInput = {
    AND?: Enumerable<produtoWhereInput>
    OR?: Enumerable<produtoWhereInput>
    NOT?: Enumerable<produtoWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    foto?: StringNullableFilter | string | null
    categoria?: IntFilter | number
    categoria_categoriaToproduto?: XOR<CategoriaRelationFilter, categoriaWhereInput>
    itens?: ItemListRelationFilter
  }

  export type produtoOrderByInput = {
    id?: SortOrder
    nome?: SortOrder
    foto?: SortOrder
    categoria?: SortOrder
  }

  export type produtoWhereUniqueInput = {
    id?: number
    nome?: string
  }

  export type produtoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<produtoScalarWhereWithAggregatesInput>
    OR?: Enumerable<produtoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<produtoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    foto?: StringNullableWithAggregatesFilter | string | null
    categoria?: IntWithAggregatesFilter | number
  }

  export type categoriaCreateInput = {
    nome: string
    produtos?: produtoCreateNestedManyWithoutCategoria_categoriaToprodutoInput
  }

  export type categoriaUncheckedCreateInput = {
    id?: number
    nome: string
    produtos?: produtoUncheckedCreateNestedManyWithoutCategoria_categoriaToprodutoInput
  }

  export type categoriaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    produtos?: produtoUpdateManyWithoutCategoria_categoriaToprodutoInput
  }

  export type categoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    produtos?: produtoUncheckedUpdateManyWithoutCategoria_categoriaToprodutoInput
  }

  export type categoriaCreateManyInput = {
    id?: number
    nome: string
  }

  export type categoriaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type compraCreateInput = {
    anotacao?: string | null
    createdat?: Date | string | null
    updatedat?: Date | string | null
    itens?: itemCreateNestedManyWithoutCompra_compraToitemInput
  }

  export type compraUncheckedCreateInput = {
    id?: number
    anotacao?: string | null
    createdat?: Date | string | null
    updatedat?: Date | string | null
    itens?: itemUncheckedCreateNestedManyWithoutCompra_compraToitemInput
  }

  export type compraUpdateInput = {
    anotacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itens?: itemUpdateManyWithoutCompra_compraToitemInput
  }

  export type compraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    anotacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itens?: itemUncheckedUpdateManyWithoutCompra_compraToitemInput
  }

  export type compraCreateManyInput = {
    id?: number
    anotacao?: string | null
    createdat?: Date | string | null
    updatedat?: Date | string | null
  }

  export type compraUpdateManyMutationInput = {
    anotacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type compraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    anotacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itemCreateInput = {
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    compra_compraToitem: compraCreateNestedOneWithoutItensInput
    produto_itemToproduto: produtoCreateNestedOneWithoutItensInput
  }

  export type itemUncheckedCreateInput = {
    id?: number
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    produto: number
    compra: number
  }

  export type itemUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    compra_compraToitem?: compraUpdateOneRequiredWithoutItensInput
    produto_itemToproduto?: produtoUpdateOneRequiredWithoutItensInput
  }

  export type itemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    produto?: IntFieldUpdateOperationsInput | number
    compra?: IntFieldUpdateOperationsInput | number
  }

  export type itemCreateManyInput = {
    id?: number
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    produto: number
    compra: number
  }

  export type itemUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type itemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    produto?: IntFieldUpdateOperationsInput | number
    compra?: IntFieldUpdateOperationsInput | number
  }

  export type produtoCreateInput = {
    nome: string
    foto?: string | null
    categoria_categoriaToproduto: categoriaCreateNestedOneWithoutProdutosInput
    itens?: itemCreateNestedManyWithoutProduto_itemToprodutoInput
  }

  export type produtoUncheckedCreateInput = {
    id?: number
    nome: string
    foto?: string | null
    categoria: number
    itens?: itemUncheckedCreateNestedManyWithoutProduto_itemToprodutoInput
  }

  export type produtoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    categoria_categoriaToproduto?: categoriaUpdateOneRequiredWithoutProdutosInput
    itens?: itemUpdateManyWithoutProduto_itemToprodutoInput
  }

  export type produtoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: IntFieldUpdateOperationsInput | number
    itens?: itemUncheckedUpdateManyWithoutProduto_itemToprodutoInput
  }

  export type produtoCreateManyInput = {
    id?: number
    nome: string
    foto?: string | null
    categoria: number
  }

  export type produtoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type produtoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type ProdutoListRelationFilter = {
    every?: produtoWhereInput
    some?: produtoWhereInput
    none?: produtoWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ItemListRelationFilter = {
    every?: itemWhereInput
    some?: itemWhereInput
    none?: itemWhereInput
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableFilter | Decimal | number | string | null
  }

  export type CompraRelationFilter = {
    is?: compraWhereInput
    isNot?: compraWhereInput
  }

  export type ProdutoRelationFilter = {
    is?: produtoWhereInput
    isNot?: produtoWhereInput
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | number | string | null
    count?: NestedIntNullableFilter
    avg?: NestedDecimalNullableFilter
    sum?: NestedDecimalNullableFilter
    min?: NestedDecimalNullableFilter
    max?: NestedDecimalNullableFilter
  }

  export type CategoriaRelationFilter = {
    is?: categoriaWhereInput
    isNot?: categoriaWhereInput
  }

  export type produtoCreateNestedManyWithoutCategoria_categoriaToprodutoInput = {
    create?: XOR<Enumerable<produtoCreateWithoutCategoria_categoriaToprodutoInput>, Enumerable<produtoUncheckedCreateWithoutCategoria_categoriaToprodutoInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutCategoria_categoriaToprodutoInput>
    createMany?: produtoCreateManyCategoria_categoriaToprodutoInputEnvelope
    connect?: Enumerable<produtoWhereUniqueInput>
  }

  export type produtoUncheckedCreateNestedManyWithoutCategoria_categoriaToprodutoInput = {
    create?: XOR<Enumerable<produtoCreateWithoutCategoria_categoriaToprodutoInput>, Enumerable<produtoUncheckedCreateWithoutCategoria_categoriaToprodutoInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutCategoria_categoriaToprodutoInput>
    createMany?: produtoCreateManyCategoria_categoriaToprodutoInputEnvelope
    connect?: Enumerable<produtoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type produtoUpdateManyWithoutCategoria_categoriaToprodutoInput = {
    create?: XOR<Enumerable<produtoCreateWithoutCategoria_categoriaToprodutoInput>, Enumerable<produtoUncheckedCreateWithoutCategoria_categoriaToprodutoInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutCategoria_categoriaToprodutoInput>
    upsert?: Enumerable<produtoUpsertWithWhereUniqueWithoutCategoria_categoriaToprodutoInput>
    createMany?: produtoCreateManyCategoria_categoriaToprodutoInputEnvelope
    connect?: Enumerable<produtoWhereUniqueInput>
    set?: Enumerable<produtoWhereUniqueInput>
    disconnect?: Enumerable<produtoWhereUniqueInput>
    delete?: Enumerable<produtoWhereUniqueInput>
    update?: Enumerable<produtoUpdateWithWhereUniqueWithoutCategoria_categoriaToprodutoInput>
    updateMany?: Enumerable<produtoUpdateManyWithWhereWithoutCategoria_categoriaToprodutoInput>
    deleteMany?: Enumerable<produtoScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type produtoUncheckedUpdateManyWithoutCategoria_categoriaToprodutoInput = {
    create?: XOR<Enumerable<produtoCreateWithoutCategoria_categoriaToprodutoInput>, Enumerable<produtoUncheckedCreateWithoutCategoria_categoriaToprodutoInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutCategoria_categoriaToprodutoInput>
    upsert?: Enumerable<produtoUpsertWithWhereUniqueWithoutCategoria_categoriaToprodutoInput>
    createMany?: produtoCreateManyCategoria_categoriaToprodutoInputEnvelope
    connect?: Enumerable<produtoWhereUniqueInput>
    set?: Enumerable<produtoWhereUniqueInput>
    disconnect?: Enumerable<produtoWhereUniqueInput>
    delete?: Enumerable<produtoWhereUniqueInput>
    update?: Enumerable<produtoUpdateWithWhereUniqueWithoutCategoria_categoriaToprodutoInput>
    updateMany?: Enumerable<produtoUpdateManyWithWhereWithoutCategoria_categoriaToprodutoInput>
    deleteMany?: Enumerable<produtoScalarWhereInput>
  }

  export type itemCreateNestedManyWithoutCompra_compraToitemInput = {
    create?: XOR<Enumerable<itemCreateWithoutCompra_compraToitemInput>, Enumerable<itemUncheckedCreateWithoutCompra_compraToitemInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutCompra_compraToitemInput>
    createMany?: itemCreateManyCompra_compraToitemInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type itemUncheckedCreateNestedManyWithoutCompra_compraToitemInput = {
    create?: XOR<Enumerable<itemCreateWithoutCompra_compraToitemInput>, Enumerable<itemUncheckedCreateWithoutCompra_compraToitemInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutCompra_compraToitemInput>
    createMany?: itemCreateManyCompra_compraToitemInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type itemUpdateManyWithoutCompra_compraToitemInput = {
    create?: XOR<Enumerable<itemCreateWithoutCompra_compraToitemInput>, Enumerable<itemUncheckedCreateWithoutCompra_compraToitemInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutCompra_compraToitemInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutCompra_compraToitemInput>
    createMany?: itemCreateManyCompra_compraToitemInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutCompra_compraToitemInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutCompra_compraToitemInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type itemUncheckedUpdateManyWithoutCompra_compraToitemInput = {
    create?: XOR<Enumerable<itemCreateWithoutCompra_compraToitemInput>, Enumerable<itemUncheckedCreateWithoutCompra_compraToitemInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutCompra_compraToitemInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutCompra_compraToitemInput>
    createMany?: itemCreateManyCompra_compraToitemInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutCompra_compraToitemInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutCompra_compraToitemInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type compraCreateNestedOneWithoutItensInput = {
    create?: XOR<compraCreateWithoutItensInput, compraUncheckedCreateWithoutItensInput>
    connectOrCreate?: compraCreateOrConnectWithoutItensInput
    connect?: compraWhereUniqueInput
  }

  export type produtoCreateNestedOneWithoutItensInput = {
    create?: XOR<produtoCreateWithoutItensInput, produtoUncheckedCreateWithoutItensInput>
    connectOrCreate?: produtoCreateOrConnectWithoutItensInput
    connect?: produtoWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | number | string | null
    increment?: Decimal | number | string
    decrement?: Decimal | number | string
    multiply?: Decimal | number | string
    divide?: Decimal | number | string
  }

  export type compraUpdateOneRequiredWithoutItensInput = {
    create?: XOR<compraCreateWithoutItensInput, compraUncheckedCreateWithoutItensInput>
    connectOrCreate?: compraCreateOrConnectWithoutItensInput
    upsert?: compraUpsertWithoutItensInput
    connect?: compraWhereUniqueInput
    update?: XOR<compraUpdateWithoutItensInput, compraUncheckedUpdateWithoutItensInput>
  }

  export type produtoUpdateOneRequiredWithoutItensInput = {
    create?: XOR<produtoCreateWithoutItensInput, produtoUncheckedCreateWithoutItensInput>
    connectOrCreate?: produtoCreateOrConnectWithoutItensInput
    upsert?: produtoUpsertWithoutItensInput
    connect?: produtoWhereUniqueInput
    update?: XOR<produtoUpdateWithoutItensInput, produtoUncheckedUpdateWithoutItensInput>
  }

  export type categoriaCreateNestedOneWithoutProdutosInput = {
    create?: XOR<categoriaCreateWithoutProdutosInput, categoriaUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutProdutosInput
    connect?: categoriaWhereUniqueInput
  }

  export type itemCreateNestedManyWithoutProduto_itemToprodutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProduto_itemToprodutoInput>, Enumerable<itemUncheckedCreateWithoutProduto_itemToprodutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProduto_itemToprodutoInput>
    createMany?: itemCreateManyProduto_itemToprodutoInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type itemUncheckedCreateNestedManyWithoutProduto_itemToprodutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProduto_itemToprodutoInput>, Enumerable<itemUncheckedCreateWithoutProduto_itemToprodutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProduto_itemToprodutoInput>
    createMany?: itemCreateManyProduto_itemToprodutoInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
  }

  export type categoriaUpdateOneRequiredWithoutProdutosInput = {
    create?: XOR<categoriaCreateWithoutProdutosInput, categoriaUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutProdutosInput
    upsert?: categoriaUpsertWithoutProdutosInput
    connect?: categoriaWhereUniqueInput
    update?: XOR<categoriaUpdateWithoutProdutosInput, categoriaUncheckedUpdateWithoutProdutosInput>
  }

  export type itemUpdateManyWithoutProduto_itemToprodutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProduto_itemToprodutoInput>, Enumerable<itemUncheckedCreateWithoutProduto_itemToprodutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProduto_itemToprodutoInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutProduto_itemToprodutoInput>
    createMany?: itemCreateManyProduto_itemToprodutoInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutProduto_itemToprodutoInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutProduto_itemToprodutoInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type itemUncheckedUpdateManyWithoutProduto_itemToprodutoInput = {
    create?: XOR<Enumerable<itemCreateWithoutProduto_itemToprodutoInput>, Enumerable<itemUncheckedCreateWithoutProduto_itemToprodutoInput>>
    connectOrCreate?: Enumerable<itemCreateOrConnectWithoutProduto_itemToprodutoInput>
    upsert?: Enumerable<itemUpsertWithWhereUniqueWithoutProduto_itemToprodutoInput>
    createMany?: itemCreateManyProduto_itemToprodutoInputEnvelope
    connect?: Enumerable<itemWhereUniqueInput>
    set?: Enumerable<itemWhereUniqueInput>
    disconnect?: Enumerable<itemWhereUniqueInput>
    delete?: Enumerable<itemWhereUniqueInput>
    update?: Enumerable<itemUpdateWithWhereUniqueWithoutProduto_itemToprodutoInput>
    updateMany?: Enumerable<itemUpdateManyWithWhereWithoutProduto_itemToprodutoInput>
    deleteMany?: Enumerable<itemScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableFilter | Decimal | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | number | string | null
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | number | string | null
    count?: NestedIntNullableFilter
    avg?: NestedDecimalNullableFilter
    sum?: NestedDecimalNullableFilter
    min?: NestedDecimalNullableFilter
    max?: NestedDecimalNullableFilter
  }

  export type produtoCreateWithoutCategoria_categoriaToprodutoInput = {
    nome: string
    foto?: string | null
    itens?: itemCreateNestedManyWithoutProduto_itemToprodutoInput
  }

  export type produtoUncheckedCreateWithoutCategoria_categoriaToprodutoInput = {
    id?: number
    nome: string
    foto?: string | null
    itens?: itemUncheckedCreateNestedManyWithoutProduto_itemToprodutoInput
  }

  export type produtoCreateOrConnectWithoutCategoria_categoriaToprodutoInput = {
    where: produtoWhereUniqueInput
    create: XOR<produtoCreateWithoutCategoria_categoriaToprodutoInput, produtoUncheckedCreateWithoutCategoria_categoriaToprodutoInput>
  }

  export type produtoCreateManyCategoria_categoriaToprodutoInputEnvelope = {
    data: Enumerable<produtoCreateManyCategoria_categoriaToprodutoInput>
    skipDuplicates?: boolean
  }

  export type produtoUpsertWithWhereUniqueWithoutCategoria_categoriaToprodutoInput = {
    where: produtoWhereUniqueInput
    update: XOR<produtoUpdateWithoutCategoria_categoriaToprodutoInput, produtoUncheckedUpdateWithoutCategoria_categoriaToprodutoInput>
    create: XOR<produtoCreateWithoutCategoria_categoriaToprodutoInput, produtoUncheckedCreateWithoutCategoria_categoriaToprodutoInput>
  }

  export type produtoUpdateWithWhereUniqueWithoutCategoria_categoriaToprodutoInput = {
    where: produtoWhereUniqueInput
    data: XOR<produtoUpdateWithoutCategoria_categoriaToprodutoInput, produtoUncheckedUpdateWithoutCategoria_categoriaToprodutoInput>
  }

  export type produtoUpdateManyWithWhereWithoutCategoria_categoriaToprodutoInput = {
    where: produtoScalarWhereInput
    data: XOR<produtoUpdateManyMutationInput, produtoUncheckedUpdateManyWithoutProdutosInput>
  }

  export type produtoScalarWhereInput = {
    AND?: Enumerable<produtoScalarWhereInput>
    OR?: Enumerable<produtoScalarWhereInput>
    NOT?: Enumerable<produtoScalarWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    foto?: StringNullableFilter | string | null
    categoria?: IntFilter | number
  }

  export type itemCreateWithoutCompra_compraToitemInput = {
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    produto_itemToproduto: produtoCreateNestedOneWithoutItensInput
  }

  export type itemUncheckedCreateWithoutCompra_compraToitemInput = {
    id?: number
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    produto: number
  }

  export type itemCreateOrConnectWithoutCompra_compraToitemInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutCompra_compraToitemInput, itemUncheckedCreateWithoutCompra_compraToitemInput>
  }

  export type itemCreateManyCompra_compraToitemInputEnvelope = {
    data: Enumerable<itemCreateManyCompra_compraToitemInput>
    skipDuplicates?: boolean
  }

  export type itemUpsertWithWhereUniqueWithoutCompra_compraToitemInput = {
    where: itemWhereUniqueInput
    update: XOR<itemUpdateWithoutCompra_compraToitemInput, itemUncheckedUpdateWithoutCompra_compraToitemInput>
    create: XOR<itemCreateWithoutCompra_compraToitemInput, itemUncheckedCreateWithoutCompra_compraToitemInput>
  }

  export type itemUpdateWithWhereUniqueWithoutCompra_compraToitemInput = {
    where: itemWhereUniqueInput
    data: XOR<itemUpdateWithoutCompra_compraToitemInput, itemUncheckedUpdateWithoutCompra_compraToitemInput>
  }

  export type itemUpdateManyWithWhereWithoutCompra_compraToitemInput = {
    where: itemScalarWhereInput
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyWithoutItensInput>
  }

  export type itemScalarWhereInput = {
    AND?: Enumerable<itemScalarWhereInput>
    OR?: Enumerable<itemScalarWhereInput>
    NOT?: Enumerable<itemScalarWhereInput>
    id?: IntFilter | number
    quantidade?: IntFilter | number
    preco?: DecimalNullableFilter | Decimal | number | string | null
    unidade?: StringFilter | string
    foto?: StringNullableFilter | string | null
    produto?: IntFilter | number
    compra?: IntFilter | number
  }

  export type compraCreateWithoutItensInput = {
    anotacao?: string | null
    createdat?: Date | string | null
    updatedat?: Date | string | null
  }

  export type compraUncheckedCreateWithoutItensInput = {
    id?: number
    anotacao?: string | null
    createdat?: Date | string | null
    updatedat?: Date | string | null
  }

  export type compraCreateOrConnectWithoutItensInput = {
    where: compraWhereUniqueInput
    create: XOR<compraCreateWithoutItensInput, compraUncheckedCreateWithoutItensInput>
  }

  export type produtoCreateWithoutItensInput = {
    nome: string
    foto?: string | null
    categoria_categoriaToproduto: categoriaCreateNestedOneWithoutProdutosInput
  }

  export type produtoUncheckedCreateWithoutItensInput = {
    id?: number
    nome: string
    foto?: string | null
    categoria: number
  }

  export type produtoCreateOrConnectWithoutItensInput = {
    where: produtoWhereUniqueInput
    create: XOR<produtoCreateWithoutItensInput, produtoUncheckedCreateWithoutItensInput>
  }

  export type compraUpsertWithoutItensInput = {
    update: XOR<compraUpdateWithoutItensInput, compraUncheckedUpdateWithoutItensInput>
    create: XOR<compraCreateWithoutItensInput, compraUncheckedCreateWithoutItensInput>
  }

  export type compraUpdateWithoutItensInput = {
    anotacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type compraUncheckedUpdateWithoutItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    anotacao?: NullableStringFieldUpdateOperationsInput | string | null
    createdat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedat?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type produtoUpsertWithoutItensInput = {
    update: XOR<produtoUpdateWithoutItensInput, produtoUncheckedUpdateWithoutItensInput>
    create: XOR<produtoCreateWithoutItensInput, produtoUncheckedCreateWithoutItensInput>
  }

  export type produtoUpdateWithoutItensInput = {
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    categoria_categoriaToproduto?: categoriaUpdateOneRequiredWithoutProdutosInput
  }

  export type produtoUncheckedUpdateWithoutItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: IntFieldUpdateOperationsInput | number
  }

  export type categoriaCreateWithoutProdutosInput = {
    nome: string
  }

  export type categoriaUncheckedCreateWithoutProdutosInput = {
    id?: number
    nome: string
  }

  export type categoriaCreateOrConnectWithoutProdutosInput = {
    where: categoriaWhereUniqueInput
    create: XOR<categoriaCreateWithoutProdutosInput, categoriaUncheckedCreateWithoutProdutosInput>
  }

  export type itemCreateWithoutProduto_itemToprodutoInput = {
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    compra_compraToitem: compraCreateNestedOneWithoutItensInput
  }

  export type itemUncheckedCreateWithoutProduto_itemToprodutoInput = {
    id?: number
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    compra: number
  }

  export type itemCreateOrConnectWithoutProduto_itemToprodutoInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutProduto_itemToprodutoInput, itemUncheckedCreateWithoutProduto_itemToprodutoInput>
  }

  export type itemCreateManyProduto_itemToprodutoInputEnvelope = {
    data: Enumerable<itemCreateManyProduto_itemToprodutoInput>
    skipDuplicates?: boolean
  }

  export type categoriaUpsertWithoutProdutosInput = {
    update: XOR<categoriaUpdateWithoutProdutosInput, categoriaUncheckedUpdateWithoutProdutosInput>
    create: XOR<categoriaCreateWithoutProdutosInput, categoriaUncheckedCreateWithoutProdutosInput>
  }

  export type categoriaUpdateWithoutProdutosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type itemUpsertWithWhereUniqueWithoutProduto_itemToprodutoInput = {
    where: itemWhereUniqueInput
    update: XOR<itemUpdateWithoutProduto_itemToprodutoInput, itemUncheckedUpdateWithoutProduto_itemToprodutoInput>
    create: XOR<itemCreateWithoutProduto_itemToprodutoInput, itemUncheckedCreateWithoutProduto_itemToprodutoInput>
  }

  export type itemUpdateWithWhereUniqueWithoutProduto_itemToprodutoInput = {
    where: itemWhereUniqueInput
    data: XOR<itemUpdateWithoutProduto_itemToprodutoInput, itemUncheckedUpdateWithoutProduto_itemToprodutoInput>
  }

  export type itemUpdateManyWithWhereWithoutProduto_itemToprodutoInput = {
    where: itemScalarWhereInput
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyWithoutItensInput>
  }

  export type produtoCreateManyCategoria_categoriaToprodutoInput = {
    id?: number
    nome: string
    foto?: string | null
  }

  export type produtoUpdateWithoutCategoria_categoriaToprodutoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    itens?: itemUpdateManyWithoutProduto_itemToprodutoInput
  }

  export type produtoUncheckedUpdateWithoutCategoria_categoriaToprodutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    itens?: itemUncheckedUpdateManyWithoutProduto_itemToprodutoInput
  }

  export type produtoUncheckedUpdateManyWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type itemCreateManyCompra_compraToitemInput = {
    id?: number
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    produto: number
  }

  export type itemUpdateWithoutCompra_compraToitemInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    produto_itemToproduto?: produtoUpdateOneRequiredWithoutItensInput
  }

  export type itemUncheckedUpdateWithoutCompra_compraToitemInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    produto?: IntFieldUpdateOperationsInput | number
  }

  export type itemUncheckedUpdateManyWithoutItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    produto?: IntFieldUpdateOperationsInput | number
  }

  export type itemCreateManyProduto_itemToprodutoInput = {
    id?: number
    quantidade: number
    preco?: Decimal | number | string | null
    unidade: string
    foto?: string | null
    compra: number
  }

  export type itemUpdateWithoutProduto_itemToprodutoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    compra_compraToitem?: compraUpdateOneRequiredWithoutItensInput
  }

  export type itemUncheckedUpdateWithoutProduto_itemToprodutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | number | string | null
    unidade?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    compra?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}